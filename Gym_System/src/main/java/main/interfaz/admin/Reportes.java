package main.interfaz.admin;

import java.time.LocalDate;
import java.util.List;
import main.dao.*;
import main.models.*;
import main.reportes.*;
import main.utils.Utils;

/**
 *
 * @author marco
 */
public class Reportes extends javax.swing.JPanel {

    /**
     * Creates new form Reportes
     */
    public Reportes() {
        initComponents();
        generarTop10ClientesFrecuentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        com_Report = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_Reportes = new javax.swing.JTextPane();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("FreeMono", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 85, 30));
        jLabel1.setText("Reportes ");

        com_Report.setBackground(new java.awt.Color(255, 85, 30));
        com_Report.setFont(new java.awt.Font("FreeMono", 1, 20)); // NOI18N
        com_Report.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Top 10 clientes más frecuentes", "Top 10 clientes con mayor gasto", "Ranking de clientes con mayor asistencia cruzada", "Top 5 entrenadores con más clientes asignados", "Top 5 entrenadores con mayor número de rutinas creadas", "Ranking de entrenadores con mayor retención de clientes", "Entrenadores con mayor especialización en servicios adicionales", "Ranking de sucursales con más ingresos", "Ranking de sucursales por número de asistencias registradas", "Tipos de membresías más vendidas", "Ingresos totales por tipo de membresía", "Reporte de pagos filtrados por fechas", "Distribución de clientes por tipo de membresía en cada sucursal", "Equipos más utilizados en las rutinas de los clientes", "Equipos con mayor coincidencia en rutinas de clientes Premium o VIP", "Control de equipos disponibles por sucursal" }));
        com_Report.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                com_ReportActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("FreeMono", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Tipo");

        txt_Reportes.setBackground(new java.awt.Color(255, 255, 255));
        txt_Reportes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 85, 30)));
        txt_Reportes.setFont(new java.awt.Font("FreeMono", 1, 18)); // NOI18N
        txt_Reportes.setForeground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(txt_Reportes);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(com_Report, javax.swing.GroupLayout.PREFERRED_SIZE, 799, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 46, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(com_Report, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void com_ReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_com_ReportActionPerformed
        // TODO add your handling code here:
        String opcionSeleccionada = (String) com_Report.getSelectedItem();

        switch (opcionSeleccionada) {
            case "Top 10 clientes más frecuentes":
                generarTop10ClientesFrecuentes();
                break;
            case "Top 10 clientes con mayor gasto":
                generarTop10ClientesMayorGasto();
                break;
            case "Ranking de clientes con mayor asistencia cruzada":
                generarRankingClientesAsistenciaCruzada();
                break;
            case "Top 5 entrenadores con más clientes asignados":
                generarTop5EntrenadoresClientesAsignados();
                break;
            case "Top 5 entrenadores con mayor número de rutinas creadas":
                generarTop5EntrenadoresRutinasCreadas();
                break;
            case "Ranking de entrenadores con mayor retención de clientes":
                generarRankingEntrenadoresRetencionClientes();
                break;
            case "Entrenadores con mayor especialización en servicios adicionales":
                generarEntrenadoresEspecializacionServicios();
                break;
            case "Ranking de sucursales con más ingresos":
                generarRankingSucursalesIngresos();
                break;
            case "Ranking de sucursales por número de asistencias registradas":
                generarRankingSucursalesAsistencias();
                break;
            case "Tipos de membresías más vendidas":
                generarMembresiasMasVendidas();
                break;
            case "Ingresos totales por tipo de membresía":
                generarIngresosPorMembresia();
                break;
            case "Reporte de pagos filtrados por fechas":
                generarReportePagosPorFechas(LocalDate.of(2025, 1, 1), LocalDate.of(2025, 12, 31));
                break;
            case "Distribución de clientes por tipo de membresía en cada sucursal":
                generarDistribucionClientesMembresiaSucursal();
                break;
            case "Equipos más utilizados en las rutinas de los clientes":
                generarEquiposMasUtilizados();
                break;
            case "Equipos con mayor coincidencia en rutinas de clientes Premium o VIP":
                generarEquiposClientesPremiumVIP();
                break;
            case "Control de equipos disponibles por sucursal":
                generarControlEquiposDisponibles();
                break;
            default:
                txt_Reportes.setText("Seleccione una opción válida");
                break;
        }
    }//GEN-LAST:event_com_ReportActionPerformed

    // metodos para los reportes
    /* CLIENTES */
    private void generarTop10ClientesFrecuentes() {
        ReportesDao dao = new ReportesDao();
        List<ReporteFrecuencia> lista = dao.topClientesFrecuentes();

        StringBuilder sb = new StringBuilder();
        sb.append(String.format("%-15s %-20s %-20s %-15s\n", "DPI", "Nombre", "Apellido", "Asistencias"));
        sb.append("-------------------------------------------------------------------------------\n");

        for (ReporteFrecuencia r : lista) {
            sb.append(String.format("%-15d %-20s %-20s %-15d\n",
                    r.getDpi(),
                    r.getNombre(),
                    r.getApellido(),
                    r.getTotalAsistencias()));
        }

        txt_Reportes.setText(sb.toString());
    }

    private void generarTop10ClientesMayorGasto() {
        ReportesDao dao = new ReportesDao();
        List<ReporteGasto> lista = dao.topClientesGasto();

        StringBuilder sb = new StringBuilder();
        sb.append(String.format("%-15s %-20s %-20s %-15s\n", "DPI", "Nombre", "Apellido", "Gasto Total"));
        sb.append("-------------------------------------------------------------------------------\n");

        for (ReporteGasto r : lista) {
            sb.append(String.format("%-15d %-20s %-20s Q%-15.2f\n",
                    r.getDpi(),
                    r.getNombre(),
                    r.getApellido(),
                    r.getGastoTotal()));
        }

        txt_Reportes.setText(sb.toString());
    }

    private void generarRankingClientesAsistenciaCruzada() {
        ReportesDao dao = new ReportesDao();
        List<ReporteAsistenciaCruzada> lista = dao.topAsistenciaCruzada();

        StringBuilder sb = new StringBuilder();
        sb.append(String.format("%-15s %-20s %-20s %-15s %-20s %-15s\n",
                "DPI", "Nombre", "Apellido", "Asistencias", "Sucursal", "Ratio"));
        sb.append("------------------------------------------------------------------------------------------------------------------\n");
        for (ReporteAsistenciaCruzada r : lista) {
            sb.append(String.format("%-15d %-20s %-20s %-15d %-20s %-15.3f\n",
                    r.getDpi(),
                    r.getNombre(),
                    r.getApellido(),
                    r.getTotalAsistencias(),
                    Utils.getSucursalNombre(r.getSucursalesDistintas()),
                    r.getRatioDiversidad()));
        }

        txt_Reportes.setText(sb.toString());
    }

    /* ENTRENADORES */
    private void generarTop5EntrenadoresClientesAsignados() {
        ReportesDao dao = new ReportesDao();
        List<ReporteEntrenador> lista = dao.topEntrenadoresMasClientes();

        StringBuilder sb = new StringBuilder();
        sb.append(String.format("%-15s %-20s %-20s %-10s\n", "DPI", "Nombre", "Apellido", "Clientes"));
        sb.append("-----------------------------------------------------------------------\n");

        for (ReporteEntrenador r : lista) {
            sb.append(String.format("%-15d %-20s %-20s %-10.0f\n",
                    r.getDpi(), r.getNombre(), r.getApellido(), r.getValor()));
        }

        txt_Reportes.setText(sb.toString());
    }

    private void generarTop5EntrenadoresRutinasCreadas() {
        ReportesDao dao = new ReportesDao();
        List<ReporteEntrenador> lista = dao.topEntrenadoresMasRutinas();

        StringBuilder sb = new StringBuilder();
        sb.append(String.format("%-15s %-20s %-20s %-10s\n", "DPI", "Nombre", "Apellido", "Rutinas"));
        sb.append("-----------------------------------------------------------------------\n");

        for (ReporteEntrenador r : lista) {
            sb.append(String.format("%-15d %-20s %-20s %-10.0f\n",
                    r.getDpi(), r.getNombre(), r.getApellido(), r.getValor()));
        }

        txt_Reportes.setText(sb.toString());
    }

    private void generarRankingEntrenadoresRetencionClientes() {
        ReportesDao dao = new ReportesDao();
        List<ReporteEntrenador> lista = dao.rankingEntrenadoresRetencion();

        StringBuilder sb = new StringBuilder();
        sb.append(String.format("%-15s %-20s %-20s %-10s\n", "DPI", "Nombre", "Apellido", "Retención"));
        sb.append("-----------------------------------------------------------------------\n");

        for (ReporteEntrenador r : lista) {
            sb.append(String.format("%-15d %-20s %-20s %-10.2f%%\n",
                    r.getDpi(), r.getNombre(), r.getApellido(), r.getValor()));
        }

        txt_Reportes.setText(sb.toString());
    }

    private void generarEntrenadoresEspecializacionServicios() {
        ReportesDao dao = new ReportesDao();
        List<ReporteEntrenador> lista = dao.entrenadoresServiciosAdicionales();

        StringBuilder sb = new StringBuilder();
        sb.append(String.format("%-15s %-20s %-20s %-15s\n", "DPI", "Nombre", "Apellido", "Clientes c/servicios"));
        sb.append("-----------------------------------------------------------------------\n");

        for (ReporteEntrenador r : lista) {
            sb.append(String.format("%-15d %-20s %-20s %-15.0f\n",
                    r.getDpi(), r.getNombre(), r.getApellido(), r.getValor()));
        }

        txt_Reportes.setText(sb.toString());
    }

    /* SUCURSALES */
    private void generarRankingSucursalesIngresos() {
        ReportesDao dao = new ReportesDao();
        List<ReporteSucursal> lista = dao.rankingSucursalesIngresos();

        StringBuilder sb = new StringBuilder();
        sb.append(String.format("%-10s %-25s %-20s\n", "ID", "Sucursal", "Ingresos Totales (Q)"));
        sb.append("---------------------------------------------------------------\n");

        for (ReporteSucursal r : lista) {
            sb.append(String.format("%-10d %-25s %-20.2f\n",
                    r.getIdSucursal(), r.getNombre(), r.getValor()));
        }

        txt_Reportes.setText(sb.toString());
    }

    private void generarRankingSucursalesAsistencias() {
        ReportesDao dao = new ReportesDao();
        List<ReporteSucursal> lista = dao.rankingSucursalesAsistencias();

        StringBuilder sb = new StringBuilder();
        sb.append(String.format("%-10s %-25s %-20s\n", "ID", "Sucursal", "Total Asistencias"));
        sb.append("---------------------------------------------------------------\n");

        for (ReporteSucursal r : lista) {
            sb.append(String.format("%-10d %-25s %-20.0f\n",
                    r.getIdSucursal(), r.getNombre(), r.getValor()));
        }

        txt_Reportes.setText(sb.toString());
    }

    /* MEMBRESIAS Y PAGOS */
    private void generarMembresiasMasVendidas() {
        ReportesDao dao = new ReportesDao();
        List<ReporteMembresia> lista = dao.tiposMembresiasMasVendidas();

        StringBuilder sb = new StringBuilder();
        sb.append(String.format("%-10s %-20s %-15s\n", "ID", "Tipo Membresía", "Vendidas"));
        sb.append("--------------------------------------------------\n");

        for (ReporteMembresia r : lista) {
            sb.append(String.format("%-10d %-20s %-15.0f\n",
                    r.getIdTipo(), r.getNombre(), r.getValor()));
        }
        txt_Reportes.setText(sb.toString());
    }

    private void generarIngresosPorMembresia() {
        ReportesDao dao = new ReportesDao();
        List<ReporteMembresia> lista = dao.ingresosPorTipoMembresia();

        StringBuilder sb = new StringBuilder();
        sb.append(String.format("%-10s %-20s %-20s\n", "ID", "Tipo Membresía", "Ingresos Totales (Q)"));
        sb.append("--------------------------------------------------\n");

        for (ReporteMembresia r : lista) {
            sb.append(String.format("%-10d %-20s %-20.2f\n",
                    r.getIdTipo(), r.getNombre(), r.getValor()));
        }
        txt_Reportes.setText(sb.toString());
    }

    private void generarReportePagosPorFechas(LocalDate inicio, LocalDate fin) {
        ReportesDao dao = new ReportesDao();
        List<ReportePago> lista = dao.pagosPorFechas(inicio, fin);

        StringBuilder sb = new StringBuilder();
        sb.append(String.format("%-10s %-25s %-15s %-15s %-15s\n", "ID", "Cliente", "Monto", "Inicio", "Fin"));
        sb.append("--------------------------------------------------------------------------\n");

        for (ReportePago r : lista) {
            sb.append(String.format("%-10d %-25s %-15.2f %-15s %-15s\n",
                    r.getIdPago(), r.getCliente(), r.getMonto(), r.getFechaInicio(), r.getFechaFin()));
        }
        txt_Reportes.setText(sb.toString());
    }

    private void generarDistribucionClientesMembresiaSucursal() {
        ReportesDao dao = new ReportesDao();
        List<ReporteDistribucion> lista = dao.distribucionMembresiasPorSucursal();

        StringBuilder sb = new StringBuilder();
        sb.append(String.format("%-10s %-20s %-20s %-15s %-15s\n", "Sucursal ID", "Sucursal", "Tipo Membresía", "Cantidad", "Porcentaje"));
        sb.append("-------------------------------------------------------------------------------\n");

        for (ReporteDistribucion r : lista) {
            sb.append(String.format("%-10d %-20s %-20s %-15d %-15.2f%%\n",
                    r.getIdSucursal(), r.getSucursal(), r.getTipoMembresia(), r.getCantidad(), r.getPorcentaje()));
        }
        txt_Reportes.setText(sb.toString());
    }

    /* INVENTARIO */
    private void generarEquiposMasUtilizados() {
        ReportesDao dao = new ReportesDao();
        List<ReporteEquiposMasUtilizados> lista = dao.equiposMasUtilizados();

        StringBuilder sb = new StringBuilder();
        sb.append(String.format("%-10s %-25s %-15s\n", "ID Equipo", "Equipo", "Veces Utilizado"));
        sb.append("-------------------------------------------------------------\n");

        for (ReporteEquiposMasUtilizados r : lista) {
            sb.append(String.format("%-10d %-25s %-15d\n",
                    r.getIdEquipo(),
                    r.getEquipo(),
                    r.getVecesUtilizado()));
        }

        txt_Reportes.setText(sb.toString());
    }

    private void generarEquiposClientesPremiumVIP() {
        ReportesDao dao = new ReportesDao();
        List<ReporteEquiposPremiumVip> lista = dao.equiposPremiumVip();

        StringBuilder sb = new StringBuilder();
        sb.append(String.format("%-10s %-25s %-15s\n", "ID Equipo", "Equipo", "Usado (Premium/VIP)"));
        sb.append("-------------------------------------------------------------\n");

        for (ReporteEquiposPremiumVip r : lista) {
            sb.append(String.format("%-10d %-25s %-15d\n",
                    r.getIdEquipo(),
                    r.getEquipo(),
                    r.getVecesUtilizado()));
        }

        txt_Reportes.setText(sb.toString());
    }

    private void generarControlEquiposDisponibles() {
        ReportesDao dao = new ReportesDao();
        List<ReporteControlEquiposSucursal> lista = dao.controlEquiposSucursal();

        StringBuilder sb = new StringBuilder();
        sb.append(String.format("%-12s %-20s %-10s %-25s %-15s\n",
                "ID Sucursal", "Sucursal", "ID Equipo", "Equipo", "Disponibles"));
        sb.append("---------------------------------------------------------------------------------------------\n");

        for (ReporteControlEquiposSucursal r : lista) {
            sb.append(String.format("%-12d %-20s %-10d %-25s %-15d\n",
                    r.getIdSucursal(),
                    r.getSucursal(),
                    r.getIdEquipo(),
                    r.getEquipo(),
                    r.getDisponibles()));
        }

        txt_Reportes.setText(sb.toString());
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> com_Report;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane txt_Reportes;
    // End of variables declaration//GEN-END:variables
}
